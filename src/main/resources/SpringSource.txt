Spring容器的refresh()【创建刷新】

1、prepareRefresh() 刷新前的预处理
    1、initPropertySources();初始化一些属性设置；子类自定义个性化属性设置
    2、getEnvironment().validateRequiredProperties();检验属性的合法等。。
    3、earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>(); 保存容器中的一些早期事件


2、ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); 获取BeanFactory
    1、refreshBeanFactory(); 刷新BeanFactory
        在子类GenericApplicationContext中创建了一个BeanFactory并给bean工厂设置Id
        public GenericApplicationContext() {
            this.beanFactory = new DefaultListableBeanFactory();
        }

    2、在AbstractApplicationContext 中调用 getBeanFactory() 获取bean工厂
    ConfigurableListableBeanFactory beanFactory = getBeanFactory();

    3、返回创建的 BeanFactory 【DefaultListableBeanFactory】

3、prepareBeanFactory(beanFactory); BeanFactory的预准备工作，进行一些设置
    1、设置BeanFacotry的类的类加载器，支持表达式解析器
    2、添加部分BeanPostProcessor 【ApplicationContextAwareProcessor】
    3、设置忽略的自动装配的接口 【EnvironmentAware、EmbeddedValueResolverAware、...】,这些接口的实现类不能通过接口类型自动注入
    4、注册可以解析的自动装配，我们能直接在任何组件中自动注入 【BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext】
    5、添加BeanPostProcessor 【ApplicationListenerDetector】
    6、添加编译时的AspectJ
    7、给BeanFactory中注册一些能用的组件：
        environment 【ConfigurableEnvironment】
        systemProperties 【Map<String, Object>】
        systemEnvironment 【Map<String, Object>】

4、postProcessBeanFactory(beanFactory); BeanFactory准备工作完成后进行的后置处理工作
    1、子类通过重写这个方法来在BeanFactory创建并预准备完成后做进一步的设置


===================================以上是BeanFactory的创建以及预准备工作========================================

5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessors的方法
    BeanFactoryPostProcessor是BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的
     两大接口  BeanFactoryPostProcessor 、 BeanDefinitionRegistryPostProcessor
     1、执行 BeanFactoryPostProcessor 的方法
        先执行 BeanDefinitionRegistryPostProcessor
        1、拿到所有的 BeanDefinitionRegistryPostProcessor【 postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);】
        2、看优先级实现了 PriorityOrdered优先级接口的 BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);
        3、再执行实现了Ordered顺序接口的 BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);
        4、最后执行没有实现任何优先级或顺序接口的 BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);

        再执行 BeanFactoryPostProcessor 的方法
        1、拿到所有的 BeanFactoryPostProcessor 【 beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);】
        2、看优先级实现了 PriorityOrdered优先级接口的 BeanFactoryPostProcessor
            postProcessor.postProcessBeanFactory(registry);
        3、再执行实现了Ordered顺序接口的 BeanFactoryPostProcessor
            postProcessor.postProcessBeanFactory(registry);
        4、最后执行没有实现任何优先级或顺序接口的 BeanFactoryPostProcessor
            postProcessor.postProcessBeanFactory(registry);


6、registerBeanPostProcessors(beanFactory);注册 BeanPostProcessor (Bean的后置处理器，拦截bean的创建过程)
    不同接口的类型的 BeanPostProcessor ，在Bean创建前后的执行时机是不一样的
    BeanPostProcessor
    DestructionAwareBeanPostProcessor
    InstantiationAwareBeanPostProcessor
    SmartInstantiationAwareBeanPostProcessor
    MergedBeanDefinitionPostProcessor 【保存在 internalPostProcessors 这个集合中】

    1、String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false); 获取所有的 BeanPostProcessor
    后置处理器都默认可以通过 PriorityOrdered、Ordered 接口来执行优先级
    2、先注册 PriorityOrdered 优先级接口的 BeanPostProcessor
        把每一个 BeanPostProcessor 添加到 BeanFactory中
        beanFactory.addBeanPostProcessor(postProcessor);
    3、再注册 Ordered接口的
    4、最后注册没有实现任何优先级接口的
    5、最终注册 MergedBeanDefinitionPostProcessor
    6、注册一个 ApplicationListenerDetector ，用来在bean创建完成后检查是否是ApplicationListener,如果是则
    applicationContext.addApplicationListener((ApplicationListener<?>) bean);

7、initMessageSource(); 初始化MessageSource组件 （做国际化功能，消息绑定，消息解析）
    1、获取BeanFactory
    2、判断容器中是否有 id为 messageSource 的组件
        如果有则赋值给容器的 messageSource 属性，如果没有则自己创建一个 DelegatingMessageSource 对象再赋值
        MessageSource:取出国际化配置文件中的某个key的值，能按照区域信息获取
    3、把创建好的MessageSource注册在容器中的beanFactory中，以后要国际化配置文件的值的时候，可以自动注入MessageSource 调用getMessage方法
    beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);


8、initApplicationEventMulticaster(); 初始化事件派发器
    1、获取BeanFactory
    2、从BeanFactory中获取名为"applicationEventMulticaster"的 ApplicationEventMulticaster
    beanFactory.getBean("applicationEventMulticaster", ApplicationEventMulticaster.class);
    3、如果上一步没有配置则创建一个 SimpleApplicationEventMulticaster
    4、将创建的 SimpleApplicationEventMulticaster添加到BeanFactory中，以后其他组件可以直接自动注入


9、onRefresh(); 留给子容器（子类）
    1、子类重写这个方法，在容器刷新的时候可以自定义逻辑


10、registerListeners(); 给容器中将所有项目里面的ApplicationListener注册进来
    1、从容器中拿到所有 ApplicationListener 组件
    2、将每个监听器添加到事件派发器中
    getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3、派发之前步骤产生的事件

11、finishBeanFactoryInitialization(beanFactory); 初始化所有剩下的单实例bean
    1、beanFactory.preInstantiateSingletons(); 初始化所有剩下的单实例bean
        1、获取容器中的所有Bean,依次进行初始化和创建对象
        2、获取Bean的定义信息 RootBeanDefinition
        3、Bean不是抽象的，是单实例的，不是懒加载的
            1、判断是否是FactoryBean(实现FactoryBean接口的Bean)
            2、不是工厂Bean,利用 getBean(beanName);创建对象
                0、getBean(beanName),就是ioc.getBean()
                1、doGetBean(name, null, null, false);
                2、先获取缓存中保存的单实例Bean,如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）
                从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);中取
                3、缓存中没取到，开始Bean的创建对象流程
                4、标记当前bean已经被创建
                5、获取bean的定义信息
                6、获取当前Bean依赖的其他Bean(就是配置文件中depend-on  <bean id="xxx" class="" depend-on="otherBeanId"></bean>)
                如果有则还是按照getBean() 把依赖的Bean先创建出来
                7、启动单实例bean的创建流程
                    1、createBean(beanName, mbd, args);
                    2、Object bean = resolveBeforeInstantiation(beanName, mbdToUse); 让BeanPostProcessor先拦截返回代理对象
                        InstantiationAwareBeanPostProcessor 提前执行
                        先触发 postProcessBeforeInstantiation()，
                        如果有返回值，触发postProcessAfterInitialization()
                    3、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象则调用下面第4步
                    4、Object beanInstance = doCreateBean(beanName,mbdToUse,args);创建bean
                        1、创建bean实例  createBeanInstance(beanName,mbd,args);
                            利用工厂方法或者对象的构造器创建出Bean实例；
                        2、applyMergedBeanDefinitionPostProcessors(mbd,beanType,beanName);
                            调用MergedBeanDefinitionPostProcessor的 postProcessMergedBeanDefinition()方法
                        3、【Bean属性赋值】 populateBean(beanName,mdb,instanceWrapper);
                            赋值之前
                            1、拿到 InstantiationAwareBeanPostProcessor 后置处理器执行 postProcessAfterInstantiation();
                            2、还是拿到 InstantiationAwareBeanPostProcessor 后置处理器执行 postProcessPropertyValues();
                            =========================上面是赋值之前=========================
                            3、应用Bean属性的值；为属性利用setter方法等进行赋值
                                applyPropertyValues(beanName,mbd,b2,pvs)
                        4、【Bean初始化】 initializeBean(beanName,exposedObject,mbd);
                            1、【执行Aware接口方法】 invokeAwareMethods(beanName,bean);执行Aware接口的方法
                                BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
                            2、【执行后置处理器初始化之前的方法】 applyBeanPostProcessorsBeforeInitialization(wrappedBean,beanName)
                                BeanPostProcessor.postProcessBeforeInitialization()
                            3、【执行初始化方法】 invokeInitMethods(beanName,wrappedBean,mbd);
                                1、是否是InitializingBean接口的实现，如果是则执行接口规定的初始化
                                2、是否自定义初始化方法，如果有则执行
                            4、【执行后置处理器初始化之后的方法】 applyBeanPostProcessorsAfterInitialization()
                                BeanPostProcessor.postProcessAfterInitialization()
                        5、注册bean的销毁方法
                    5、将创建的bean添加到缓存中 singletonObjects;
                    ioc容器就是Map，很多的map里保存了单实例bean,环境信息....
            所有bean利用getBean创建完成以后，
                检查bean是否是SmartInitalizingSingleton接口的，如果是就执行 afterSingletonsInstantiated() 方法

12、finishRefresh(); 完成BeanFactory的初始化创建工作，IOC容器就创建完成
    1、initLifecycleProcessor() 初始化和生命周期有的后置处理器 ,LifecycleProcessor允许我们
        默认从容器中找是否有 LifecycleProcessor 的组件，如果没有则 new DefaultLifecycleProcessor() 加入到容器中
        写一个 LifecycleProcessor 的实现类，可以在BeanFactory的刷新完成或关闭的时候调用
        void onRefresh()
        void onClose()

    2、 拿到前面定义的生命周期处理器（其实是监听BeanFactory生命周期ID） 回调onRefresh()
        getLifecycleProcessor().onRefresh();

    3、publishEvent(new ContextRefreshedEvent(this)); 发布容器刷新事件

    4、最后 LiveBeansView.registerApplicationContext(this);


====================总结=====================
1、spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息
    1、xml注册Bean <bean></bean>
    2、注解注册Bean  @Service  @Component  @Bean  ....

2、spring容器会在合适的时机创建这些bean
    1、用到这个bean的时候，利用getBean创建bean,创建好以后保存在容器中
    2、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization
3、后置处理器 BeanPostProcessor
    每一个bean的创建完成，都会使用各种后置器进行处理，来增强bean的功能
    AutowiredAnnotationBeanPostProcessor 处理自动注入
    AnnotationAwareAspectJAutoProxyCreator 来做aop功能
    AsyncAnnotationBeanPostProcessor

4、事件驱动模型
    ApplicationListener;事件监听
    ApplicationEventMulticaster；事件派发






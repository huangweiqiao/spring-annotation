Spring容器的refresh()【创建刷新】

1、prepareRefresh() 刷新前的预处理
    1、initPropertySources();初始化一些属性设置；子类自定义个性化属性设置
    2、getEnvironment().validateRequiredProperties();检验属性的合法等。。
    3、earlyApplicationEvents = new LinkedHashSet<ApplicationEvent>(); 保存容器中的一些早期事件


2、ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory(); 获取BeanFactory
    1、refreshBeanFactory(); 刷新BeanFactory
        在子类GenericApplicationContext中创建了一个BeanFactory并给bean工厂设置Id
        public GenericApplicationContext() {
            this.beanFactory = new DefaultListableBeanFactory();
        }

    2、在AbstractApplicationContext 中调用 getBeanFactory() 获取bean工厂
    ConfigurableListableBeanFactory beanFactory = getBeanFactory();

    3、返回创建的 BeanFactory 【DefaultListableBeanFactory】

3、prepareBeanFactory(beanFactory); BeanFactory的预准备工作，进行一些设置
    1、设置BeanFacotry的类的类加载器，支持表达式解析器
    2、添加部分BeanPostProcessor 【ApplicationContextAwareProcessor】
    3、设置忽略的自动装配的接口 【EnvironmentAware、EmbeddedValueResolverAware、...】,这些接口的实现类不能通过接口类型自动注入
    4、注册可以解析的自动装配，我们能直接在任何组件中自动注入 【BeanFactory、ResourceLoader、ApplicationEventPublisher、ApplicationContext】
    5、添加BeanPostProcessor 【ApplicationListenerDetector】
    6、添加编译时的AspectJ
    7、给BeanFactory中注册一些能用的组件：
        environment 【ConfigurableEnvironment】
        systemProperties 【Map<String, Object>】
        systemEnvironment 【Map<String, Object>】

4、postProcessBeanFactory(beanFactory); BeanFactory准备工作完成后进行的后置处理工作
    1、子类通过重写这个方法来在BeanFactory创建并预准备完成后做进一步的设置


===================================以上是BeanFactory的创建以及预准备工作========================================
//完成所谓的扫描，将我们的类封装成成 BeanDefinition的子类对象，然后保存到 beanFactory的 beanDefinitionMap中，key就是beanId
5、invokeBeanFactoryPostProcessors(beanFactory);执行BeanFactoryPostProcessors的方法
    BeanFactoryPostProcessor是BeanFactory的后置处理器，在BeanFactory标准初始化之后执行的
     两大接口  BeanFactoryPostProcessor 、 BeanDefinitionRegistryPostProcessor
     1、执行 BeanFactoryPostProcessor 的方法
        先执行 BeanDefinitionRegistryPostProcessor
        1、拿到所有的 BeanDefinitionRegistryPostProcessor【 postProcessorNames = beanFactory.getBeanNamesForType(BeanDefinitionRegistryPostProcessor.class, true, false);】
        2、看优先级实现了 PriorityOrdered优先级接口的 BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);
        3、再执行实现了Ordered顺序接口的 BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);
        4、最后执行没有实现任何优先级或顺序接口的 BeanDefinitionRegistryPostProcessor
            postProcessor.postProcessBeanDefinitionRegistry(registry);

        再执行 BeanFactoryPostProcessor 的方法
        1、拿到所有的 BeanFactoryPostProcessor 【 beanFactory.getBeanNamesForType(BeanFactoryPostProcessor.class, true, false);】
        2、看优先级实现了 PriorityOrdered优先级接口的 BeanFactoryPostProcessor
            postProcessor.postProcessBeanFactory(registry);
        3、再执行实现了Ordered顺序接口的 BeanFactoryPostProcessor
            postProcessor.postProcessBeanFactory(registry);
        4、最后执行没有实现任何优先级或顺序接口的 BeanFactoryPostProcessor
            postProcessor.postProcessBeanFactory(registry);


6、registerBeanPostProcessors(beanFactory);注册 BeanPostProcessor (Bean的后置处理器，拦截bean的创建过程)
    不同接口的类型的 BeanPostProcessor ，在Bean创建前后的执行时机是不一样的
    BeanPostProcessor
    DestructionAwareBeanPostProcessor
    InstantiationAwareBeanPostProcessor
    SmartInstantiationAwareBeanPostProcessor
    MergedBeanDefinitionPostProcessor 【保存在 internalPostProcessors 这个集合中】

    1、String[] postProcessorNames = beanFactory.getBeanNamesForType(BeanPostProcessor.class, true, false); 获取所有的 BeanPostProcessor
    后置处理器都默认可以通过 PriorityOrdered、Ordered 接口来执行优先级
    2、先注册 PriorityOrdered 优先级接口的 BeanPostProcessor
        把每一个 BeanPostProcessor 添加到 BeanFactory中
        beanFactory.addBeanPostProcessor(postProcessor);
    3、再注册 Ordered接口的
    4、最后注册没有实现任何优先级接口的
    5、最终注册 MergedBeanDefinitionPostProcessor
    6、注册一个 ApplicationListenerDetector ，用来在bean创建完成后检查是否是ApplicationListener,如果是则
    applicationContext.addApplicationListener((ApplicationListener<?>) bean);

7、initMessageSource(); 初始化MessageSource组件 （做国际化功能，消息绑定，消息解析）
    1、获取BeanFactory
    2、判断容器中是否有 id为 messageSource 的组件
        如果有则赋值给容器的 messageSource 属性，如果没有则自己创建一个 DelegatingMessageSource 对象再赋值
        MessageSource:取出国际化配置文件中的某个key的值，能按照区域信息获取
    3、把创建好的MessageSource注册在容器中的beanFactory中，以后要国际化配置文件的值的时候，可以自动注入MessageSource 调用getMessage方法
    beanFactory.registerSingleton(MESSAGE_SOURCE_BEAN_NAME, this.messageSource);


8、initApplicationEventMulticaster(); 初始化事件派发器
    1、获取BeanFactory
    2、从BeanFactory中获取名为"applicationEventMulticaster"的 ApplicationEventMulticaster
    beanFactory.getBean("applicationEventMulticaster", ApplicationEventMulticaster.class);
    3、如果上一步没有配置则创建一个 SimpleApplicationEventMulticaster
    4、将创建的 SimpleApplicationEventMulticaster添加到BeanFactory中，以后其他组件可以直接自动注入


9、onRefresh(); 留给子容器（子类）
    1、子类重写这个方法，在容器刷新的时候可以自定义逻辑


10、registerListeners(); 给容器中将所有项目里面的ApplicationListener注册进来
    1、从容器中拿到所有 ApplicationListener 组件
    2、将每个监听器添加到事件派发器中
    getApplicationEventMulticaster().addApplicationListenerBean(listenerBeanName);
    3、派发之前步骤产生的事件

11、finishBeanFactoryInitialization(beanFactory); 初始化所有剩下的非懒加载单实例bean
    1、beanFactory.preInstantiateSingletons(); 初始化所有剩下的单实例bean
        1、获取容器中的所有Bean,依次进行初始化和创建对象
        2、获取Bean的定义信息 RootBeanDefinition
        3、Bean不是抽象的，是单实例的，不是懒加载的
            1、判断是否是FactoryBean(实现FactoryBean接口的Bean)
            2、不是工厂Bean,利用 getBean(beanName);创建对象
                0、getBean(beanName),就是ioc.getBean()
                1、doGetBean(name, null, null, false);
                /**
                    注意这是第一次调用getSingleton方法，下面spring还会调用一次，但是两次调用的不是同一个方法，属于方法的重载，
                    第一次getSingleton(beanName)也是循环依赖中最重要的方法，关于getSingleton(beanName)这里给出这个方法的总结：
                    首先spring会去单例池中去根据名字获取这个bean,单例池就是一个map,如果对象被创建了则直接从map中拿出来并且返回，但是
                    问题来了，为什么spring在创建一个bean的时候会去获取一次呢？因为作为代码的书写者肯定知道这个bean这个时候没有创建？
                    为什么要get一次呢？这里稍微解释下吧，我们可以分析doGetBean这个方法，顾名思义其实是用来获取bean的，为什么创建bean
                    会调用这个doGetBean方法呢？难道是spring作者疏忽，或者乱起名字？显然不是，spring源码以书写优秀，命名优秀而著名，那么
                    怎么解释这个方法呢？其实很简单，doGetBean这个方法不仅仅在创建bean的时候会被调用，在getBean的时候也会被调用，他是
                    创建bean和getBean通用的方法，但是这只是解释了方法的名字意义，并没有解释这个方法为什么会在创建bean的时候调用，原因很复杂，
                    其中有一点是循环引用，由于循环引用需要在创建bean的过程中去获取被引用的按个类，而被引用的那个类如果没有创建，则会调用
                    createBean来创建这个bean,在创建这个被引用的bean的过程中会判断这个bean的对象有没有实例化bean的对象？什么意思呢？
                    为了方便阅读，一定要记住两个概念，什么是bean,什么是对象，笔者以为一个对象和bean是有区别的。
                    对象：只要类被实例化就可以称为对象
                    bean:首先得是一个对象，然后这个对象需要经历一系列的bean生命周期，最后把这个对象put到单例池才能算一个bean
                    读者千万注意，笔者下文中如果写到Bean和写到对象不是随意写的，是和这里的解释有关系的。
                    简而言之就是spring先new一个对象，继而对这个对象进行生命周期回调，接着对这个对象进行属性填充，也就是大家说的自动注入，然后再
                    进行AOP判断等等，这些操作简称-----spring生命周期,所以一个bean是一个经历了spring周期的对象，和一个对象有区别。
                    在回到前面说的循环引用，首先spring扫描到一个需要被实例化的类A，于是spring就去创建A，A=new A-a;new A的过程中会调用getBean("a");
                    所谓的getBean方法--核心就在 getSingleton(beanName),这个时候get出来肯定为空？为什么是空呢？写这么多注释就是为了解释这个问题？
                    可能有些读者会认为getBean就是去容器中获取，所以肯定为空，其实不然，接着往下看，
                    如果getA等于空，spring就会实例化A，也就是上面的new A,但是在实例化A的时候会再次调用一下getSingleton(String beanName,ObjectFactory<?>singletonFactory),
                    笔者上面说过现在写的注释给getSingleton(beanName),也即是第一次调用getSingleton(beanName)
                    实例化一共会调用两次getSingleton方法，但是是重载，第二次调用getSingleton方法的时候spring会在一个set集合当中记录一下这个类正在被创建，
                    这个一定要记住，在调用完成第一次getSingleton完成后，spring判断这个类没有创建，然后调用第二次getSingleton,在第二次getSingleton里面记录了一下自己已经开始实例化这个类，
                    这是循环依赖做的最牛逼的地方，两次getSingleton的调用，也是回答面试时候关于循环依赖必须要回答到的地方。
                    需要说明的spring实例化一个对象底层用的是反射；
                    spring实例化一个对象的过程非常复杂，需要推断构造方法等等，这里笔者先不去讨论这个过程，以后有机会再更新一下，
                    读者可以理解spring直接通过new 关键字来实例化一个对象，但是这个手对象a仅仅只是一个对象，还不是一个完整的bean,接着让这个对象去完成spring的bean的生命周期，
                    过程中spring会判断容器是否允许循环引用，判断循环引用的代码笔者下面会分析，前面说过spring默认是支持循环引用的，笔者后面解析这个判断的源码也是spring默认支持循环引用的证据，
                    如果允许循环依赖，spring会把这个对象(还不是bean)临时存起来，放到一个map中，注意这个map和单例池是两个map,在spring源码中单例池的map叫 singletonObjects,
                    而这个存放临时对象的map叫做singletonFactories
                    当然spring还有一个存放临时对象的map叫做earlySingletonObjects
                    所以一个有三个map,有些博客或者书籍也叫做三级缓存，
                    为什么需要三个map呢？先来了解这三个map到底都缓存了什么，
                    第一个map singletonObjects存放的单例的bean
                    第二个map singletonFactories 存放的临时对象（没有完整spring生命周期的对象）
                    第三个map earlySingletonObjects 存放的临时对象 （没有完整spring生命周期的对象），
                    笔者为了让大家不懵逼，这里把第二个map和第三个map功能写成了一样，其实第二个和第三个map会有不一样的地方，但这里不方便展开讲，下文分析，
                    读者姑且认为这两个map是一样的，
                    第一个map主要为了直接缓存创建好的bean,方便程序员去getBean,很好理解
                    第二个和第三个主要是为了循环引用，为什么为了方便循环引用，接着往下看
                    把对象a缓存到第二个map之后，会接着完善生命周期，
                    当然spring bean的生命周期有很步骤，本文先不详细讨论；
                    后面的博客笔者再更新；
                    当进行到对象a 的属性填充的这一周期的时候，发觉a依赖了一个B类
                    所以spring就会去判断这个B类到底有没有bean在容器中，
                    这里的判断就是从第一个map即单例池中去拿一个bean
                    后面我会通过源码来证明是从第一个map中拿一个bean的
                    假设没有，那么spring会先去调用createBean创建这个bean
                    于是又回到创建A一样的流程，在创建B的时候同样也会去getBean（“B”）；
                    getBean核心也就是笔者现在写注释的这个getSingleton(beanName)方法。
                    下面我们重申一下：因为是重点
                    这个时候get出来肯定为空？为什么是空呢？我写这么多注释就是为了解释这个问题/
                    可能有读者会认为getBean就是去容器中获取；
                    所有肯定为空，其实不然后，接着往下看；
                    第一次调用getSingleton完成之后会调用第二次getSingleton
                    第二次调用getSingleton同样会在set集合当中去记录B正在被创建
                    请读者记住这个时候 set集合中至少有两个记录了,A和B；
                    如果为空就 b = new B();创建一个b对象；
                    再次说明一下关于实例化一个对象，spring做的很复杂，下次讨论
                    创建完B的对象之后，接着完善B的生命周期
                    同样也会判断是否允许循环依赖，如果允许则把对象b 存到第二个map当中；
                    提醒一下读者这个时候第二个map当中至少有两个对象了，a 和 b
                    接着继续生命周期，当进行到b对象的属性填充的时候发觉b需要依赖A
                    于是就去容器看看A有没有创建，说白了就是从第一个map中去找a
                    有人会说不是在前面创建了a吗？注意这只是个对象，不是bean;
                    还不在第一个map当中，所有b判定A没有创建，于是就去创建A；
                    那么又再次回到了原点了，创建A的过程中；首先调用getBean("a")
                    上文说到getBean("a")的核心就是getSingleton(beanName)
                    上文也说了get出来a==null;但是这次却不等于空了
                    这次能拿出一个a对象，注意是对象不是bean
                    为什么两次不同？原因在于getSingleton(beanName)的源码
                    getSingleton(beanName)首先从第一个map当中获取bean  (352行)

                    就是判断a那个set集合当中有没有记录A；
                    如果这个集合当中包含了A则直接把a对象从map当中get出来并且返回
                    所以这一次就不等于空了，于是B就可以自动注入这个a对象了
                    这个时候a还只是对象，a这个对象里面依赖的B还没有注入
                    当b对象注入完成a之后，把B的周期走完，存在容器当中
                    存完之后继续返回，返回到a注入b那里？
                    因为b的创建是因为a需要注入b,于是去get b
                    当b创建完成一个bean之后，返回b(b 已经是一个bean了)
                    需要说明的b是一个bean意味着b已经注入完成了a;这点上面已经说明了
                    由于返回了一个b,故而a也能注入b了；
                    接着a对象继续完成生命周期，当走完之后a也在容器中了
                    至此循环依赖搞定
                    需要说明一下，上文提到的正在创建这种说法并没有官方支持
                    是笔者自己的认为，各位读者可以自行给他取名
                    笔者是因为存放那些记录的set集合的名字叫做singletonsCurrentlyIncreation
                    顾名思义，当前正在创建的单例对象。。。。
                    以上是循环依赖的整个过程，其中getSingleton(beanName)
                    这个方法的存在至关重要

                */
                2、getSingleton(beanName)先获取缓存中保存的单实例Bean,如果能获取到说明这个Bean之前被创建过（所有创建过的单实例Bean都会被缓存起来）
                从private final Map<String, Object> singletonObjects = new ConcurrentHashMap<String, Object>(256);中取
                3、缓存中没取到，开始Bean的创建对象流程
                4、标记当前bean已经被创建
                5、获取bean的定义信息
                6、获取当前Bean依赖的其他Bean(就是配置文件中depend-on  <bean id="xxx" class="" depend-on="otherBeanId"></bean>)
                如果有则还是按照getBean() 把依赖的Bean先创建出来
                7、启动单实例bean的创建流程
                    1、createBean(beanName, mbd, args);
                    2、Object bean = resolveBeforeInstantiation(beanName, mbdToUse); 让BeanPostProcessor先拦截返回代理对象
                        InstantiationAwareBeanPostProcessor 提前执行
                        先触发 postProcessBeforeInstantiation()，
                        如果有返回值，触发postProcessAfterInitialization()
                    3、如果前面的InstantiationAwareBeanPostProcessor没有返回代理对象则调用下面第4步
                    4、Object beanInstance = doCreateBean(beanName,mbdToUse,args);创建bean
                        1、创建bean实例  createBeanInstance(beanName,mbd,args);
                            利用工厂方法或者对象的构造器创建出Bean实例；
                        2、applyMergedBeanDefinitionPostProcessors(mbd,beanType,beanName);
                            调用MergedBeanDefinitionPostProcessor的 postProcessMergedBeanDefinition()方法
                        3、【Bean属性赋值】 populateBean(beanName,mdb,instanceWrapper);
                            赋值之前
                            1、拿到 InstantiationAwareBeanPostProcessor 后置处理器执行 postProcessAfterInstantiation();
                            2、还是拿到 InstantiationAwareBeanPostProcessor 后置处理器执行 postProcessPropertyValues();
                            =========================上面是赋值之前=========================
                            3、应用Bean属性的值；为属性利用setter方法等进行赋值
                                applyPropertyValues(beanName,mbd,b2,pvs)
                        4、【Bean初始化】 initializeBean(beanName,exposedObject,mbd);
                            1、【执行Aware接口方法】 invokeAwareMethods(beanName,bean);执行Aware接口的方法
                                BeanNameAware\BeanClassLoaderAware\BeanFactoryAware
                            2、【执行后置处理器初始化之前的方法】 applyBeanPostProcessorsBeforeInitialization(wrappedBean,beanName)
                                BeanPostProcessor.postProcessBeforeInitialization()
                            3、【执行初始化方法】 invokeInitMethods(beanName,wrappedBean,mbd);
                                1、是否是InitializingBean接口的实现，如果是则执行接口规定的初始化
                                2、是否自定义初始化方法，如果有则执行
                            4、【执行后置处理器初始化之后的方法】 applyBeanPostProcessorsAfterInitialization()
                                BeanPostProcessor.postProcessAfterInitialization()
                        5、注册bean的销毁方法
                    5、将创建的bean添加到缓存中 singletonObjects;
                    ioc容器就是Map，很多的map里保存了单实例bean,环境信息....
            所有bean利用getBean创建完成以后，
                检查bean是否是SmartInitalizingSingleton接口的，如果是就执行 afterSingletonsInstantiated() 方法

12、finishRefresh(); 完成BeanFactory的初始化创建工作，IOC容器就创建完成
    1、initLifecycleProcessor() 初始化和生命周期有的后置处理器 ,LifecycleProcessor允许我们
        默认从容器中找是否有 LifecycleProcessor 的组件，如果没有则 new DefaultLifecycleProcessor() 加入到容器中
        写一个 LifecycleProcessor 的实现类，可以在BeanFactory的刷新完成或关闭的时候调用
        void onRefresh()
        void onClose()

    2、 拿到前面定义的生命周期处理器（其实是监听BeanFactory生命周期ID） 回调onRefresh()
        getLifecycleProcessor().onRefresh();

    3、publishEvent(new ContextRefreshedEvent(this)); 发布容器刷新事件

    4、最后 LiveBeansView.registerApplicationContext(this);


====================总结=====================
1、spring容器在启动的时候，先会保存所有注册进来的Bean的定义信息
    1、xml注册Bean <bean></bean>
    2、注解注册Bean  @Service  @Component  @Bean  ....

2、spring容器会在合适的时机创建这些bean
    1、用到这个bean的时候，利用getBean创建bean,创建好以后保存在容器中
    2、统一创建剩下所有的bean的时候；finishBeanFactoryInitialization
3、后置处理器 BeanPostProcessor
    每一个bean的创建完成，都会使用各种后置器进行处理，来增强bean的功能
    AutowiredAnnotationBeanPostProcessor 处理自动注入
    AnnotationAwareAspectJAutoProxyCreator 来做aop功能
    AsyncAnnotationBeanPostProcessor

4、事件驱动模型
    ApplicationListener;事件监听
    ApplicationEventMulticaster；事件派发


================================================================================================

spring的循环引用是怎么解决的？
    默认情况下spring是支持单例循环引用的。 例如： A 依赖 B， B 依赖 A ,单例情况下是没问题的

    怎么证明是支持单例循环依赖的？

    怎么关闭循环依赖？


依赖的注入在什么时候完成？
1、初始化bean ---- bean有一个初始化过程-----spring bean的生命周期

spring bean 的产生过程-------------------bean是由什么产生的？

Class--------------beanDefinition------------object(bean)

spring bean的生命周期到底在哪个步骤完成依赖注入的？

bean--------------------------spring bean
java对象-----------------------对象






org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean  542行第四次调用后置处理器
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean  553行属性填充，也就是平常说的自动注入，里面第五次和第六次调用后置处理器
org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean  初始化sping，里面第七次和第八次调用后置处理器


spring提供的扩展点：
BeanPostProcessor
BeanFactoryPostProcessor
BeanDefinitionRegistryPostProcessor
ImportSelector
ImportBeanDefinitionRegistrar

